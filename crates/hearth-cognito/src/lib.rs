use hearth_rpc::ProcessApi;
use hearth_wasm::WasmLinker;
use wasmtime::{Caller, Linker};

/// This contains all script-accessible process-related stuff.
pub struct Cognito {
    pub api: Box<dyn ProcessApi + Send + Sync>,
}

// Should automatically generate link_print_hello_world:
// #[impl_wasm_linker]
// should work for any struct, not just Cognito
impl Cognito {
    pub async fn print_hello_world(&self) {
        self.api.print_hello_world().await.unwrap();
    }

    // this is only generated; written up by hand for reference
    // remember to use absolute identifiers (prefixed with ::) for all references to structs
    pub fn link_print_hello_world<T: AsRef<Self> + Send>(linker: &mut Linker<T>) {
        async fn print_hello_world<T: AsRef<Cognito> + Send>(caller: Caller<'_, T>) {
            let cognito = caller.data().as_ref();
            cognito.print_hello_world().await;
        }

        linker
            // arity for the function name should be read by the proc macro
            // the module name can be derived by converting the struct's name to snake case
            .func_wrap0_async("cognito", "print_hello_world", |caller: Caller<'_, T>| {
                Box::new(print_hello_world(caller))
            })
            .unwrap();
    }
}

// this impl block should also be generated by #[impl_wasm_linker] with all of
// the functions in its body
impl<T: AsRef<Cognito> + Send + 'static> WasmLinker<T> for Cognito {
    const MODULE_NAME: &'static str = "cognito";

    fn add_to_linker(linker: &mut Linker<T>) {
        Self::link_print_hello_world(linker);
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use hearth_rpc::{remoc, CallResult};
    use remoc::rtc::async_trait;

    struct MockProcessApi;

    #[async_trait]
    impl ProcessApi for MockProcessApi {
        async fn print_hello_world(&self) -> CallResult<()> {
            println!("Hello, world!");
            Ok(())
        }
    }

    #[test]
    fn host_works() {
        let api = Box::new(MockProcessApi);
        let cognito = Cognito { api };
        cognito.print_hello_world();
    }
}
